/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TreumExchangeInterface extends ethers.utils.Interface {
  functions: {
    "cancel(tuple)": FunctionFragment;
    "cancelAllBefore(uint256)": FunctionFragment;
    "canceledOrders(bytes32)": FunctionFragment;
    "fill(uint256,tuple,bytes)": FunctionFragment;
    "fillFor(tuple,bytes,bytes)": FunctionFragment;
    "fillWithNativeAsset(uint256,tuple,bytes)": FunctionFragment;
    "filledAmount(bytes32)": FunctionFragment;
    "getOrderType(tuple)": FunctionFragment;
    "getTypedDataHash(tuple)": FunctionFragment;
    "hash(tuple)": FunctionFragment;
    "invalidNonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setWrappedAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wrappedAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancel",
    values: [
      {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllBefore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canceledOrders",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fill",
    values: [
      BigNumberish,
      {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillFor",
    values: [
      {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillWithNativeAsset",
    values: [
      BigNumberish,
      {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "filledAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderType",
    values: [
      {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedDataHash",
    values: [
      {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [
      {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidNonces",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canceledOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillWithNativeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypedDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedAddress",
    data: BytesLike
  ): Result;

  events: {
    "Cancel(bytes32,address)": EventFragment;
    "CancelAllBefore(uint256,address)": EventFragment;
    "Fill(uint256,uint256,address,uint256,uint256,address,address,uint256,uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Payout(address,address[],address,uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAllBefore"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payout"): EventFragment;
}

export class TreumExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreumExchangeInterface;

  functions: {
    cancel(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAllBefore(
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canceledOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fill(
      fillAmount: BigNumberish,
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillFor(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      makerSignature: BytesLike,
      takerSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillWithNativeAsset(
      fillAmount: BigNumberish,
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    filledAmount(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderType(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTypedDataHash(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hash(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    invalidNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWrappedAddress(
      weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrappedAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  cancel(
    order: {
      expiry: BigNumberish;
      nonce: BigNumberish;
      makerAddress: string;
      takerAddress: string;
      makerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      takerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      payoutTo: string[];
      payoutAmount: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAllBefore(
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canceledOrders(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  fill(
    fillAmount: BigNumberish,
    order: {
      expiry: BigNumberish;
      nonce: BigNumberish;
      makerAddress: string;
      takerAddress: string;
      makerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      takerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      payoutTo: string[];
      payoutAmount: BigNumberish[];
    },
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillFor(
    order: {
      expiry: BigNumberish;
      nonce: BigNumberish;
      makerAddress: string;
      takerAddress: string;
      makerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      takerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      payoutTo: string[];
      payoutAmount: BigNumberish[];
    },
    makerSignature: BytesLike,
    takerSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillWithNativeAsset(
    fillAmount: BigNumberish,
    order: {
      expiry: BigNumberish;
      nonce: BigNumberish;
      makerAddress: string;
      takerAddress: string;
      makerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      takerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      payoutTo: string[];
      payoutAmount: BigNumberish[];
    },
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  filledAmount(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getOrderType(
    order: {
      expiry: BigNumberish;
      nonce: BigNumberish;
      makerAddress: string;
      takerAddress: string;
      makerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      takerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      payoutTo: string[];
      payoutAmount: BigNumberish[];
    },
    overrides?: CallOverrides
  ): Promise<number>;

  getTypedDataHash(
    order: {
      expiry: BigNumberish;
      nonce: BigNumberish;
      makerAddress: string;
      takerAddress: string;
      makerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      takerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      payoutTo: string[];
      payoutAmount: BigNumberish[];
    },
    overrides?: CallOverrides
  ): Promise<string>;

  hash(
    order: {
      expiry: BigNumberish;
      nonce: BigNumberish;
      makerAddress: string;
      takerAddress: string;
      makerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      takerToken: {
        kind: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
      };
      payoutTo: string[];
      payoutAmount: BigNumberish[];
    },
    overrides?: CallOverrides
  ): Promise<string>;

  invalidNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWrappedAddress(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrappedAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cancel(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAllBefore(
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canceledOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fill(
      fillAmount: BigNumberish,
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fillFor(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      makerSignature: BytesLike,
      takerSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fillWithNativeAsset(
      fillAmount: BigNumberish,
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    filledAmount(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderType(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<number>;

    getTypedDataHash(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hash(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<string>;

    invalidNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setWrappedAddress(weth: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wrappedAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Cancel(
      orderHash?: BytesLike | null,
      makerAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { orderHash: string; makerAddress: string }
    >;

    CancelAllBefore(
      timestamp?: BigNumberish | null,
      makerAddress?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { timestamp: BigNumber; makerAddress: string }
    >;

    Fill(
      orderTimestamp?: BigNumberish | null,
      timestamp?: null,
      taker?: string | null,
      takerAmount?: null,
      takerTokenId?: null,
      takerToken?: null,
      maker?: string | null,
      makerAmount?: null,
      makerId?: null,
      makerToken?: null,
      senderAddress?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        orderTimestamp: BigNumber;
        timestamp: BigNumber;
        taker: string;
        takerAmount: BigNumber;
        takerTokenId: BigNumber;
        takerToken: string;
        maker: string;
        makerAmount: BigNumber;
        makerId: BigNumber;
        makerToken: string;
        senderAddress: string;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Payout(
      from?: string | null,
      to?: null,
      token?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string[], string, BigNumber[], BigNumber],
      {
        from: string;
        to: string[];
        token: string;
        amount: BigNumber[];
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    cancel(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAllBefore(
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canceledOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fill(
      fillAmount: BigNumberish,
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillFor(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      makerSignature: BytesLike,
      takerSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillWithNativeAsset(
      fillAmount: BigNumberish,
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    filledAmount(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderType(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTypedDataHash(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWrappedAddress(
      weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrappedAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAllBefore(
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canceledOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fill(
      fillAmount: BigNumberish,
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillFor(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      makerSignature: BytesLike,
      takerSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillWithNativeAsset(
      fillAmount: BigNumberish,
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    filledAmount(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderType(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypedDataHash(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash(
      order: {
        expiry: BigNumberish;
        nonce: BigNumberish;
        makerAddress: string;
        takerAddress: string;
        makerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        takerToken: {
          kind: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
        };
        payoutTo: string[];
        payoutAmount: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedAddress(
      weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrappedAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
